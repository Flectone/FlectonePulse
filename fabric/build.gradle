import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '1.11-SNAPSHOT'
}

dependencies {
	minecraft "com.mojang:minecraft:${fabric_minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

	implementation("com.alessiodp.libby:libby-fabric:$libby_version")
	implementation("org.apache.commons:commons-lang3:3.18.0")
	implementation(project(":core"))

	Set<String> apiModules = [
			'fabric-api-base',
			'fabric-command-api-v2',
			'fabric-lifecycle-events-v1',
			'fabric-networking-api-v1'
	]

	apiModules.forEach {
		modCompileOnly(fabricApi.module(it, '0.129.0+1.21.8'))
	}

	compileOnly "net.kyori:adventure-text-minimessage:$adventure_api"
	compileOnly "net.kyori:adventure-api:$adventure_api"
	compileOnly "net.kyori:adventure-nbt:$adventure_api"
	compileOnly "net.kyori:adventure-key:$adventure_api"
	compileOnly "net.kyori:adventure-text-serializer-gson:$adventure_api"
	compileOnly "net.kyori:adventure-text-serializer-plain:$adventure_api"
	compileOnly "net.kyori:adventure-text-serializer-json-legacy-impl:$adventure_api"
	compileOnly "net.kyori:adventure-text-serializer-legacy:$adventure_api"
	compileOnly("net.elytrium:serializer:$elytrium_serializer_version")

	modCompileOnly("com.github.retrooper:packetevents-fabric:$packetevents_spigot_version")
	modCompileOnly("org.incendo:cloud-fabric:${cloud_paper_version}")
	modCompileOnly("eu.pb4:placeholder-api:$text_placeholder_api_version")
	modCompileOnly("maven.modrinth:vanish:1.5.20+1.21.1")
}

shadowJar {
	archiveFileName = "flectonepulsedev-" + project.name + "-" + project_version + ".jar"

	outputs.cacheIf { true }

	archiveBaseName.set("${project_name}-${project.name}")
	archiveClassifier.set("")
	archiveVersion.set("${project_version}")

	dependencies {
		exclude('net.fabricmc:.*')
		exclude '/mappings/*'

		include(dependency("com.alessiodp.libby:.*"))
		include(dependency("org.xerial:.*"))
		include(project(":core"))
	}

	minimize()
}

processResources {
	def props = [version: "$project_version", author: "$project_author", description: "$project_description"]
	inputs.properties props
	filteringCharset 'UTF-8'
	filesMatching('**/fabric.mod.json') {
		expand props
	}
}

tasks.register('fabricRemapJar', RemapJarTask) {
	dependsOn tasks.shadowJar
	input = tasks.shadowJar.archiveFile
	addNestedDependencies = true
	archiveFileName = "FlectonePulse-" + project.name + "-" + project_version + ".jar"
	destinationDirectory = file("$rootDir/build/libs")
}

tasks.assemble.dependsOn tasks.fabricRemapJar

artifacts {
	archives fabricRemapJar
	shadow shadowJar
}
