plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.0'
    id 'com.github.gmazzo.buildconfig' version '5.6.2'
    id 'xyz.wagyourtail.jvmdowngrader' version '1.3.3'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.gmazzo.buildconfig'
    apply plugin: 'com.gradleup.shadow'
    apply plugin: 'xyz.wagyourtail.jvmdowngrader'

    group = "net.flectone.pulse.${project.name}"

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    java {
        sourceCompatibility = java_version
        targetCompatibility = java_version
    }

    repositories {
        mavenCentral()

        maven { url = "https://jitpack.io" }
        maven { url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
        maven { url = "https://oss.sonatype.org/content/groups/public/" }
        maven { url = "https://repo.aikar.co/content/groups/aikar/" }
        maven { url = "https://repo.codemc.io/repository/maven-releases/" }
        maven { url = "https://repo.minebench.de" }
        maven { url = "https://s01.oss.sonatype.org/content/repositories/snapshots" }
        maven { url = "https://libraries.minecraft.net" }
        maven { url = "https://maven.maxhenkel.de/repository/public" }
        maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
        maven { url = "https://repo.plasmoverse.com/releases" }
        maven { url = "https://repo.plasmoverse.com/snapshots" }
        maven { url = "https://repo.loohpjames.com/repository" }
        maven { url = "https://repo.diogotc.com/releases" }
        maven { url = "https://repo.codemc.io/repository/maven-snapshots/" }
        maven { url = "https://maven.devs.beer/" }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:$lombok_version"
        compileOnly "org.jetbrains:annotations:$jetbrains_annotations_version"
        compileOnly "com.google.inject:guice:$guice_version"
        compileOnly "net.kyori:adventure-api:$adventure_api"
        compileOnly "org.apache.logging.log4j:log4j-core:$log4j_core_version"
        compileOnly "net.elytrium:serializer:$elytrium_serializer_version"
        compileOnly "org.incendo:cloud-core:$cloud_core_version"
        compileOnly "org.incendo:cloud-minecraft-extras:$cloud_minecraft_extras_version"
        compileOnly "com.zaxxer:HikariCP:$HikariCP_version"
        compileOnly "org.jdbi:jdbi3-core:$jdbi3_core_version"
        compileOnly "org.jdbi:jdbi3-sqlobject:$jdbi3_core_version"
        compileOnly "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"
        compileOnly "io.lettuce:lettuce-core:$lettuce_version"
        compileOnly "net.kyori:adventure-text-serializer-legacy:$adventure_api"
        compileOnly "net.kyori:adventure-text-minimessage:$adventure_api"
        compileOnly "net.kyori:adventure-text-serializer-gson:$adventure_api"
        compileOnly "net.kyori:adventure-text-serializer-plain:$adventure_api"
        compileOnly "com.discord4j:discord4j-core:$discord4j_version"
        compileOnly "com.github.twitch4j:twitch4j:$twitch4j_version"
        compileOnly "org.telegram:telegrambots-longpolling:$telegrambots_version"
        compileOnly "org.telegram:telegrambots-client:$telegrambots_version"
        compileOnly "com.yandex.cloud:java-sdk-services:$yandexsdk_version"
        compileOnly "com.deepl.api:deepl-java:$deepl_version"
        compileOnly "com.sparkjava:spark-core:$spark_version"
        compileOnly "com.h2database:h2:$h2_version"

        annotationProcessor "org.projectlombok:lombok:$lombok_version"
    }

    buildConfig {
        className("BuildConfig")
        packageName("net.flectone.pulse")
        rootProject.ext.properties.findAll { key, value ->
            !key.contains('.')
        }.each { key, value ->
            buildConfigField(String, key.toString().toUpperCase(), value)
        }
    }

    shadowJar {
        relocate("com.zaxxer", "net.flectone.pulse.library.hikaricp")
        relocate("org.jdbi", "net.flectone.pulse.library.jdbi3")
        relocate("com.alessiodp.libby", "net.flectone.pulse.library.libby")
        relocate("net.elytrium.serializer", "net.flectone.pulse.library.elytrium")
        relocate("com.github.retrooper.packetevents", "net.flectone.pulse.library.packetevents")
        relocate("io.github.retrooper.packetevents", "net.flectone.pulse.library.packetevents.impl")
        relocate("spark.", "net.flectone.pulse.library.spark.")

        if (!project.name.is("paper")) {
            relocate("net.kyori.adventure", "net.flectone.pulse.library.adventure")
        }

        if (!project.name.is("velocity")) {
            relocate("com.google.inject", "net.flectone.pulse.library.guice")
            relocate("com.google.common", "net.flectone.pulse.library.guava")
        }

        outputs.cacheIf { true }

        archiveBaseName.set("${project_name}-${project.name}")
        archiveClassifier.set("")
        archiveVersion.set("${project_version}")

        minimize()
    }
}

tasks.named("shadowJar").configure { enabled = false }
tasks.named("jar").configure { enabled = false }

tasks.register("mergeJars", Jar) {
    archiveVersion.set("${project_version}")

    def platforms = subprojects.findAll {
        it.name != "fabric"
    }

    from {
        platforms.collect { proj ->
            zipTree(proj.tasks.named("shadeDowngradedApi").get().archiveFile.get().asFile)
        }
    }

    from(rootProject.file('LICENSE')) {
        into('/')
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    dependsOn platforms.collect { proj -> proj.tasks.named("shadeDowngradedApi") }
}